[gd_scene load_steps=19 format=2]

[ext_resource path="res://images/gui/chat_bg/signal.png" type="Texture" id=1]
[ext_resource path="res://fonts/TechBreak.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D mask;
uniform vec4 color_dark : hint_color;
uniform vec4 color_light : hint_color;
uniform float phi;
uniform float speed = 1.0;
uniform float width = 1.0;

void fragment()
{
	vec2 uv = 4.0*mat2(vec2(cos(phi),sin(-phi)),vec2(sin(phi),cos(phi)))*(UV)*vec2(1.0,width)+vec2(0.0,speed*TIME);
	float w = texture(mask,uv).g;
	COLOR = color_dark*(1.0-w) + color_light*w;
//	COLOR = vec4(UV.x,UV.y,0.0,1.0);
}
"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/color_dark = Color( 0.101961, 0.501961, 0.14902, 1 )
shader_param/color_light = Color( 0.14902, 0.4, 0.34902, 1 )
shader_param/phi = 0.393
shader_param/speed = -0.25
shader_param/width = 0.5
shader_param/mask = ExtResource( 1 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

void fragment()
{
	COLOR = texture(TEXTURE, UV);
	COLOR.rgb = min(2.0*COLOR.rgb,1.0);
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="GDScript" id=5]
script/source = "extends Sprite

var delay = 0.075
var rnd_delay = rand_range(0.2,1.0)
var velocity = 256.0
var color = randf()

func _process(delta):
	position += delta*Vector2(0,velocity)
	if delay>0.0:
		delay -= delta
		if delay<=0.0:
			var li = duplicate()
			if randf()<0.1:
				li.position = Vector2(get_parent().rect_size.x*randf(),-16*scale.x)
				li.velocity = rand_range(256.0,512.0)
				li.scale = rand_range(0.5,2.5)*Vector2(1,1)
				li.color = randf()
			else:
				li.position = position - Vector2(0,24*scale.x)
				li.velocity = velocity
				li.scale = scale
				li.color = color+0.05
			li.frame = randi()%(hframes*vframes)
			get_parent().add_child(li)
	rnd_delay -= delta
	if rnd_delay<=0.0:
		frame = randi()%(hframes*vframes)
		rnd_delay = rand_range(0.05,0.25)
	if position.y>get_parent().rect_size.y+32:
		queue_free()

func _ready():
	if !Options.show_particles:
		queue_free()
	color = round(color)
	modulate = Color(0.1,0.5,0.15,1.0).linear_interpolate(Color(0.15,0.4,0.35,1.0),color)
"

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;

uniform vec4 color : hint_color;
uniform float offset = 0.0;
uniform int side = 1;

void fragment()
{
	float PI = 3.1415926535798;
	vec2 uv = vec2(0.5)-UV;
	vec3 ray_dir = normalize(vec3(0.0, -0.5, 1.0));
	vec3 x = normalize(cross(vec3(0.0, 1.0, 0.0), ray_dir));
	vec3 y = cross(ray_dir, x);
	float dist = 2.0;
	vec3 ray_point = x*uv.x + y*uv.y - ray_dir*dist;
	float height = 0.75;
	float radius = 0.5;
	
	if (abs(uv.x)<radius)
	{
		float local_width = sqrt(radius*radius - uv.x*uv.x);
		vec3 front_point = ray_point - ray_dir*(local_width + ray_point.z)/ray_dir.z;
		vec3 back_point   = ray_point + ray_dir*(local_width - ray_point.z)/ray_dir.z;
		vec3 cylinder_point;
		vec2 planar_pos;
		if (side==1)
			cylinder_point = front_point;
		if (side==2)
			cylinder_point = back_point;
		planar_pos.y = 1.0 - (cylinder_point.y + height/2.0)/height;
		planar_pos.y = 0.5 + (planar_pos.y-0.5)*(1.0+cylinder_point.z/2.0);
		planar_pos.x = (atan(cylinder_point.z, cylinder_point.x))/2.0/PI;
		if (planar_pos.y<1.0 && planar_pos.y>0.0)
		{
			planar_pos.x = mod(planar_pos.x,1.0);
			COLOR = color;
			COLOR.a *= clamp(8.0-24.0*abs(planar_pos.y-0.5),0.0,1.0);
			COLOR.a *= clamp(42.0-128.0*abs(mod(UV.x+offset,1.0)-0.5),0.0,1.0);1
		}
		else
			COLOR = vec4(0.0);
	}
	else
		COLOR = vec4(0.0);
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/color = Color( 0.101961, 0.501961, 0.14902, 1 )
shader_param/offset = 0.58327
shader_param/side = 2

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 6 )
shader_param/color = Color( 0.14902, 0.4, 0.34902, 1 )
shader_param/offset = 0.637453
shader_param/side = 2

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 6 )
shader_param/color = Color( 0.101961, 0.501961, 0.14902, 1 )
shader_param/offset = 1.32909
shader_param/side = 2

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 6 )
shader_param/color = Color( 0.14902, 0.4, 0.34902, 1 )
shader_param/offset = 0.937453
shader_param/side = 2

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 6 )
shader_param/color = Color( 0.101961, 0.501961, 0.14902, 1 )
shader_param/offset = 1.48327
shader_param/side = 2

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 6 )
shader_param/color = Color( 0.14902, 0.4, 0.34902, 1 )
shader_param/offset = 1.12909
shader_param/side = 2

[sub_resource type="Animation" id=14]
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=15]
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/1/type = "method"
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.4 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}

[sub_resource type="Animation" id=16]
resource_name = "rotate"
length = 40.0
loop = true
step = 5.0
tracks/0/type = "value"
tracks/0/path = NodePath("Arc1:material:shader_param/offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 40 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 4.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Arc2:material:shader_param/offset")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 40 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.2, 3.2 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Arc3:material:shader_param/offset")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 40 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.6, 5.6 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Arc4:material:shader_param/offset")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 40 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.5, 3.5 ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("Arc5:material:shader_param/offset")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 40 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.9, 4.9 ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("Arc6:material:shader_param/offset")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 40 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.4, 5.4 ]
}

[node name="Panel" type="Panel"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Letter0" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 256, -16 )
texture = ExtResource( 2 )
hframes = 58
frame = 28
script = SubResource( 5 )

[node name="Letter1" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 512, -32 )
texture = ExtResource( 2 )
hframes = 58
frame = 33
script = SubResource( 5 )

[node name="Arc1" type="Panel" parent="."]
material = SubResource( 7 )
anchor_top = -0.2
anchor_right = 1.0
anchor_bottom = 0.3
custom_styles/panel = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Arc2" type="Panel" parent="."]
material = SubResource( 9 )
anchor_right = 1.0
anchor_bottom = 0.5
custom_styles/panel = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Arc3" type="Panel" parent="."]
material = SubResource( 10 )
anchor_top = 0.2
anchor_right = 1.0
anchor_bottom = 0.7
custom_styles/panel = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Arc4" type="Panel" parent="."]
material = SubResource( 11 )
anchor_top = 0.4
anchor_right = 1.0
anchor_bottom = 0.9
custom_styles/panel = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Arc5" type="Panel" parent="."]
material = SubResource( 12 )
anchor_top = 0.6
anchor_right = 1.0
anchor_bottom = 1.1
custom_styles/panel = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Arc6" type="Panel" parent="."]
material = SubResource( 13 )
anchor_top = 0.8
anchor_right = 1.0
anchor_bottom = 1.3
custom_styles/panel = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "fade_in"
anims/fade_in = SubResource( 14 )
anims/fade_out = SubResource( 15 )

[node name="AnimationPlayerRotate" type="AnimationPlayer" parent="."]
autoplay = "rotate"
anims/rotate = SubResource( 16 )
